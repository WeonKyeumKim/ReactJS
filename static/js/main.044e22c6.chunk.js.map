{"version":3,"sources":["Table.js","Form.js","App.js","index.js"],"names":["TableHeader","TableBody","props","rows","characterData","map","row","index","key","name","job","onClick","removeCharacter","Table","this","Component","Form","handleChange","event","target","value","setState","onFormSubmit","preventDefault","handleSubmit","state","initialState","onSubmit","type","onChange","App","characters","filter","character","i","className","ReactDOM","render","document","getElementById"],"mappings":"iRAMMA,EAAc,WAClB,OACE,+BACE,4BACE,oCACA,mCACA,yCA0BFC,EAAY,SAAAC,GAShB,IAAMC,EAAOD,EAAME,cAAcC,IAAI,SAACC,EAAKC,GACzC,OACE,wBAAIC,IAAKD,GACP,4BAAKD,EAAIG,MACT,4BAAKH,EAAII,KACT,4BACE,4BAAQC,QAAS,kBAAMT,EAAMU,gBAAgBL,KAA7C,cAMR,OAAO,+BAAQJ,IAyBFU,E,iLArBH,IAAD,EACoCC,KAAKZ,MAAxCE,EADD,EACCA,cAAeQ,EADhB,EACgBA,gBACvB,OACE,+BAIE,kBAAC,EAAD,MAKA,kBAAC,EAAD,CACER,cAAeA,EACfQ,gBAAiBA,S,GAfPG,a,OCyBLC,E,YA9Eb,WAAYd,GAAQ,IAAD,8BACjB,4CAAMA,KAeRe,aAAe,SAAAC,GAAS,MAQEA,EAAMC,OAAtBV,EARc,EAQdA,KAAMW,EARQ,EAQRA,MAEd,EAAKC,SAAL,eAKGZ,EAAOW,KA/BO,EAmCnBE,aAAe,SAAAJ,GAIbA,EAAMK,iBAGN,EAAKrB,MAAMsB,aAAa,EAAKC,OAG7B,EAAKJ,SAAS,EAAKK,eA1CnB,EAAKA,aAAe,CAClBjB,KAAM,GACNC,IAAK,KAGP,EAAKe,MAAQ,EAAKC,aARD,E,sEAgDT,IAAD,EACeZ,KAAKW,MAAnBhB,EADD,EACCA,KAAMC,EADP,EACOA,IACd,OACE,0BAAMiB,SAAUb,KAAKQ,cACnB,uCACA,2BACEM,KAAK,OACLnB,KAAK,OACLW,MAAOX,EAIPoB,SAAUf,KAAKG,eAEjB,sCACA,2BACEW,KAAK,OACLnB,KAAK,MACLW,MAAOV,EAIPmB,SAAUf,KAAKG,eAEjB,4BAAQW,KAAK,UAAb,e,GA/EWb,aCgFJe,E,2MAxEbL,MAAQ,CACNM,WAAY,I,EAOdnB,gBAAkB,SAAAL,GAAU,IAClBwB,EAAe,EAAKN,MAApBM,WAER,EAAKV,SAAS,CAMZU,WAAYA,EAAWC,OAAO,SAACC,EAAWC,GACxC,OAAOA,IAAM3B,O,EASnBiB,aAAe,SAAAS,GAOb,EAAKZ,SAAS,CAAEU,WAAW,GAAD,mBAAM,EAAKN,MAAMM,YAAjB,CAA6BE,O,wEAG/C,IACAF,EAAejB,KAAKW,MAApBM,WACR,OACE,yBAAKI,UAAU,aACb,8CACA,kFACA,kBAAC,EAAD,CAeE/B,cAAe2B,EACfnB,gBAAiBE,KAAKF,kBAExB,uCAKA,kBAAC,EAAD,CAAMY,aAAcV,KAAKU,oB,GAxEfT,aCiBlBqB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.044e22c6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\n/*\n  simple function 은 render 없다\n  별도의 class 같이 사용한다.\n*/\nconst TableHeader = () => {\n  return (\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Job</th>\n        <th>Remove</th>\n      </tr>\n    </thead>\n  );\n};\n\n/*\n  map\n  calling array 안에서 every element 에 provided\n  function 의 calling 의 results 로 new array 를\n  create 한다.\n\n  array object 의 map 은 loop 을 만든다.\n  loop 에 의하여 만들어진 모든 row 들을 rows 에 만든다.\n  key={} 는 each list item  을 identify 하도록 도와주며,\n  React 에서는 lists 를 만들때 항상 사용한다.\n\n  Props 는 React component 로 existing data 를 pass 하는\n  effective way 이나, component 는 props 을 change 할 수\n  없다.  Read-only\n\n  App.js 의 state 와 method removeCharacter 를 props 으로\n  넘겨받아,  button 을 click 하면 App.ja 의 removeCharacter 로\n  index 를 pass 하여 state 를 뱐걍한다. \n\n*/\nconst TableBody = props => {\n  /*\n    under the hood, map function 은 your callback 으로\n    three arguments 를 pass 한다.\n\n    1.map 에 call 되어진 entire  array: characterData\n    2.array 안에 current item: row\n    3.current item 의 array index: index\n  */\n  const rows = props.characterData.map((row, index) => {\n    return (\n      <tr key={index}>\n        <td>{row.name}</td>\n        <td>{row.job}</td>\n        <td>\n          <button onClick={() => props.removeCharacter(index)}>Delete</button>\n        </td>\n      </tr>\n    );\n  });\n\n  return <tbody>{rows}</tbody>;\n};\n\nclass Table extends Component {\n  render() {\n    const { characterData, removeCharacter } = this.props;\n    return (\n      <table>\n        {/*\n          simple function Tableheader 를 call 한다\n        */}\n        <TableHeader />\n        {/*\n          simple function TableBody 로 data characterData 와\n          method removeCharacter 를 props 으로 pass 한다.\n        */}\n        <TableBody\n          characterData={characterData}\n          removeCharacter={removeCharacter}\n        />\n      </table>\n    );\n  }\n}\n\nexport default Table;\n","import React, { Component } from \"react\";\n\nclass Form extends Component {\n  /*\n    parent 의 handleSubmit 을 props 으로 receive 하여\n    여기서 사용하려면 constructor(props) 를 사용한다.\n    empty properties 를 갖는 object 가 되기 위하여\n    initial state 를 set 하기 위하여 this.state 를 사용한다.\n  */\n  constructor(props) {\n    super(props);\n\n    this.initialState = {\n      name: \"\",\n      job: \" \"\n    };\n\n    this.state = this.initialState;\n  }\n\n  /*\n    input 에 change 가 있으면 handleChange 는 run 하고, \n    그 event 는 pass 되어져서 form input 의 name 과 같은\n    state 에 value 를 set 한다.\n  */\n  handleChange = event => {\n    /*\n      either name or job field\n      input 의 name (key)\n      input 의 value (key value)\n        name=\"name\"\n        value={name}\n    */\n    const { name, value } = event.target;\n\n    this.setState({\n      /*\n        [name] 은 name or job 이다.\n        value 는 mame or job 의 value 이다.\n      */\n      [name]: value\n    });\n  };\n\n  onFormSubmit = event => {\n    /* form 이 submit 되어질때 browser reload/refresh 를\n       prevent\n    */\n    event.preventDefault();\n\n    /* pass status (job, value) to App.js */\n    this.props.handleSubmit(this.state);\n\n    /* clear state job, value */\n    this.setState(this.initialState);\n  };\n\n  render() {\n    const { name, job } = this.state;\n    return (\n      <form onSubmit={this.onFormSubmit}>\n        <label>Name</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          /*\n            input data 를 state 로 save 한다\n          */\n          onChange={this.handleChange}\n        />\n        <label>Job</label>\n        <input\n          type=\"text\"\n          name=\"job\"\n          value={job}\n          /*\n            input data 를 state 로 save 한다.\n          */\n          onChange={this.handleChange}\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import React, { Component } from \"react\";\nimport Table from \"./Table\";\nimport Form from \"./Form\";\n\nclass App extends Component {\n  /*\n    State 는 component 로 부터 private data 를  update 할 수\n    있다.  database 로 update 없이 cart 로 부터 add/remove/update 를\n    할 수 있게 한다.\n  */\n  state = {\n    characters: []\n  };\n\n  /*\n    Table component 로 이 method 를 prop 으로써 pass \n    한다.\n  */\n  removeCharacter = index => {\n    const { characters } = this.state;\n\n    this.setState({\n      /*\n        array object 의 filter 는 자동으로 loop 를 만들며,\n        array 를 modify 하지 않고 new array 를 만든다.\n        pass 되어진 index 를 제외한 값들만 return.\n      */\n      characters: characters.filter((character, i) => {\n        return i !== index;\n      })\n    });\n  };\n\n  /*\n    Form.js 에서 props.handleSubmit 으로 state (name, job) 을\n    character 로 pass 한다.\n  */\n  handleSubmit = character => {\n    /*\n      state characters 에 기존의 value 와 Form.js 에서 새로\n      입력된 값을 combine 하여 set 한다.\n      spread operator: ...this.state.characters\n      this.state.characters 의 값을 가져온다.\n    */\n    this.setState({ characters: [...this.state.characters, character] });\n  };\n\n  render() {\n    const { characters } = this.state;\n    return (\n      <div className=\"container\">\n        <h1>React Tutorial</h1>\n        <p>Add a character with a name and a job to the table.</p>\n        <Table\n          /*\n          JS characters 를 Table 에 characterData 로 pass 하고\n          App.js 의 removeCharacter method 를 Table 에서\n          removeCharacter 로 사용하여 State characters modify\n          할 수 있게한다.\n\n          characterData 와 removeCharacter 를 Table 에\n          props 으로써 pass 한다.\n\n          characters 와 removeCharacter 은 props 으로\n          Tbale 로 pass 한다.  Table 에서 update 된\n          state 를 App.js 로 set 하기 위하여 removeCharacter 를\n          사용한다.\n        */\n          characterData={characters}\n          removeCharacter={this.removeCharacter}\n        />\n        <h3>Add New</h3>\n        {/*\n          App.js 의 handleSubmit 을 Form.js 에서 사용하기 위하여\n          handleSubmit bind 하여 props 으로 pass 한다.\n        */}\n        <Form handleSubmit={this.handleSubmit} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/*\n    React 의 property 로써 Component 를 loading 한다.\n*/\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n/*\n    Bring App.js\n*/\n\nimport App from \"./App\";\n\n/*\n    Bring data from URL\n    You can view the data with JSON format\n*/\n/* import App from \"./Api\"; */\n\n/*\n    root 로 App 를 render 한다.\n*/\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}